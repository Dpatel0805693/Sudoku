//implement the non 9x9 grid size option - grid can be any size

public class Solver{
    private int[][] grid; 
    private int gridSize;
    private int subGridSize;
    protected Graph graph;

    public Solver(int gridSize, int subGridSize, int [][] OriginalGrid){
        this.gridSize = gridSize;
        this.subGridSize = subGridSize;
        this.grid = OriginalGrid; // creates the grid for the puzzle;
        this.graph = new Graph(); // creates graph for the specified puzzle
    }

    //Restraints:
    // No duplicates in row
    // No duplicates in column
    // No duplicates in subgrid

    //BUILD GRAPH METHOD
    public void build() {
        for (int row = 0; row < gridSize; row++) {
            for (int col = 0; col < gridSize; col++) {
                int vertex = row * gridSize + col;
                graph.addVertex(vertex);
                //connects edges in rows
                for (int c = 0; c < gridSize; c++) {
                    if (c != col) {
                        graph.addEdge(vertex, row * gridSize + c);
                    }
                }
                //connects edges in cols
                for (int r = 0; r < gridSize; r++) {
                    if (r != row) {
                        graph.addEdge(vertex, r * gridSize + col);
                    }
                }
                // connects edges in the subgrids
                int subGridRowStart = (row / subGridSize) * subGridSize;
                int subGridColStart = (col / subGridSize) * subGridSize;
                for (int r = subGridRowStart; r < subGridRowStart + subGridSize; r++) {
                    for (int c = subGridColStart; c < subGridColStart + subGridSize; c++) {
                        int subGridVertex = r * gridSize + c;
                        if (subGridVertex != vertex) {
                            graph.addEdge(vertex, subGridVertex);
                        }
                    }
                }

            }
        }
    }

    //SOlVE BY BFS METHOD

    //SOLVE BY DLS METHOD

    //CHECK IF SOLVED METHOD (maybe check if each column / row = total factorial but addition;)
        //like if grid size is 9, total = 9+8+7+6+5+4+3+2+1 = 45 and if total of a col/row =45 then it is solved

    //CHECK IF ABLE TO PLACE NUM THERE METHOD utilizes graphs adj list to check

    //COPY GRID METHOD TO MAKE CHANGES THAT DONT AFFECT ORIGINAL
    private int[][] copy(int[][] grid){
        int [][] copyGrid = new int[gridSize][gridSize];
        for (int i =0, i<gridSize,i++){
            for(int j = o, j<gridSize, j++){
                copyGrid[i][j]=grid[i][j]
            }
        }
        return copyGrid;
    }

    //PRINT SOLVED GRID METHOD

}